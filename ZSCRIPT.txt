version "4.0"

class SuperStimHandler : StaticEventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'PortableHealingItem':
				if (random[superstimrand]() <= 10)
				{
					e.Replacement = "PortableSuperStimpack";
				}
				break;
		}
	}
}

class PortableSuperStimpack : PortableStimpack
{
	Default
	{
		Inventory.PickupMessage "Picked up a super stimpack.";
		Inventory.icon "SSTMA0";
		Tag "Super stimpack";
		HDPickup.RefId "sst";
		HDInjectorMaker.InjectorType "HDSuperStimpacker";
	}
	
	States
	{
		Spawn:
			SSTM A -1;
			Stop;
	}
}

class HDSuperStimpacker : HDStimpacker
{
	override Inventory CreateTossable(int amount)
	{
		HDWoundFixer.DropMeds(owner, 0);
		return null;
	}
	override string, double GetPickupSprite() { return "SSTMA0", 1; }
	override string GetHelpText() { return WEPHELP_INJECTOR; }
	
	Default
	{
		Tag "Super stimpack";
		HDStimpacker.InjectType "InjectSuperStimDummy";
		HDStimpacker.SpentInjectType "SpentSuperStim";
		HDStimpacker.InventoryType "PortableSuperStimpack";
		HDStimpacker.NoError "No super stimpacks.";
		HDWoundFixer.InjectorIcon "SSTMA0";
		HDWoundFixer.InjectorType "PortableSuperStimpack";
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
		Select:
			TNT1 A 0
			{
				bool HelpText = GetCVar("hd_helptext");
				if (!CheckInventory(invoker.InventoryType, 1))
				{
					if (HelpText)
					{
						A_WeaponMessage(invoker.NoError);
					}
					A_SelectWeapon("HDFist");
				}
				else if (HelpText)
				{
					A_WeaponMessage("\cd<<< \cjSUPER STIMPACK \cd>>>\c-\n\n\nSuper stimpacks give a rapid\nbut short boost to\nhealth regeneration.\n\n\Press altfire to use on someone else.\n\n\cgDO NOT OVERDOSE.");
				}
			}
			goto HDWoundFixer::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0
			{
				A_SelectWeapon("HDFist");
				A_WeaponReady(WRF_NOFIRE);
			}
			Goto Nope;
		Fire:
		Hold:
			TNT1 A 1;
			TNT1 A 0
			{
				bool HelpText = GetCVar("hd_helptext");
				if (!CheckInventory(invoker.InventoryType, 1))
				{
					if (HelpText)
					{
						A_WeaponMessage(invoker.NoError);
					}
					A_Refire("DeselectHold");
				}
				else if (CheckInventory("PortableRadsuit", 1) && CheckInventory("WornRadsuit", 1))
				{
					if (HelpText)
					{
						A_WeaponMessage("Take off your environment suit first!", 2);
					}
					A_Refire("Nope");
				}
				else if (pitch <55)
				{
					A_SetPitch(pitch + 8, SPF_INTERPOLATE);
					A_Refire();
				}
				else
				{
					A_Refire("Inject");
				}
			}
			Goto Nope;
		Inject:
			TNT1 A 1
			{
				A_TakeInjector(invoker.InventoryType);
				A_SetBlend("7a 3a 18", 0.1, 4);
				A_SetPitch(pitch + 2, SPF_INTERPOLATE);
				if (HDPlayerPawn(self))
				{
					A_StartSound(HDPlayerPawn(self).medsound, CHAN_VOICE);
				}
				else
				{
					A_StartSound("*usemeds",CHAN_VOICE);
				}
				A_StartSound("misc/bulletflesh", CHAN_WEAPON);
				Actor a = Spawn(invoker.InjectType, pos, ALLOW_REPLACE);
				a.target = self;
			}
			TNT1 AAAA 1 A_SetPitch(pitch - 0.5, SPF_INTERPOLATE);
			TNT1 A 6;
			TNT1 A 0
			{
				Actor a = Spawn(invoker.SpentInjectType, pos + (0, 0, height - 8), ALLOW_REPLACE);
				a.angle = angle;
				a.vel = vel;
				a.A_ChangeVelocity(3, 1, 2, CVF_RELATIVE);
				a.A_StartSound("weapons/grenopen", 8);
			}
			Goto InjectedHold;
		AltFire:
			TNT1 A 10;
			TNT1 A 0 A_Refire();
			Goto Nope;
		AltHold:
			TNT1 A 0
			{
				if (!CheckInventory(invoker.InventoryType, 1))
				{
					if (GetCVar("hd_helptext"))
					{
						A_WeaponMessage(invoker.NoError);
					}
					A_Refire("DeselectHold");
				}
			}
			TNT1 A 8
			{
				bool HelpText = GetCVar("hd_helptext");
				FLineTraceData InjectorData;
				LineTrace(angle, 42, pitch, offsetz: height - 12, data: InjectorData);
				let plr = HDPlayerPawn(InjectorData.HitActor);
				if (!plr)
				{
					let mon = HDMobMan(InjectorData.HitActor);
					if (mon && invoker.GetClassName() == "HDSuperStimpacker")
					{
						if (mon.Stunned < 100 || mon.Health < 10)
						{
							if (HelpText)
							{
								A_WeaponMessage("They don't need it.", 2);
							}
							return ResolveState("Nope");
						}
						A_TakeInjector(invoker.InventoryType);
						mon.A_StartSound(mon.painsound, CHAN_VOICE);
						mon.Stunned = max(0, mon.stunned >> 1);
						mon.GiveBody(-30);
						if (!CheckInventory(invoker.InventoryType, 1))
						{
							return ResolveState("DeselectHold");
						}
						return ResolveState("Injected");
					}
					if (HelpText)
					{
						A_WeaponMessage("Nothing to be done here.\n\nStimulate thyself? (press fire)", 2);
					}
					return ResolveState("Nope");
				}
				else if (plr.CheckInventory("WornRadsuit", 1))
				{
					if (HelpText)
					{
						A_WeaponMessage("You'll need them to take off their environment suit...");
					}
					return ResolveState("Nope");
				}
				else if (plr.CheckInventory("IsMoving", 5))
				{
					bool PlrHelpText = plr.GetCVar("hd_helptext");
					if (plr.stimcount > 0)
					{
						if (PlrHelpText)
						{
							plr.A_Print(String.Format("Run away!!!\n\n%s is trying to overdose you\n\n(and possibly bugger you)...", player.GetUsername()));
						}
						if (HelpText)
						{
							A_WeaponMessage("They seem a bit fidgety...");
						}
					}
					else
					{
						if (PlrHelpText)
						{
							plr.A_Print(String.Format("Stop squirming!\n\n%s only wants to\n\ngive you some drugs...", player.GetUsername()));
						}
						if (HelpText)
						{
							A_WeaponMessage("You'll need them to stay still...");
						}
					}
					return ResolveState("Nope");
				}
				else if ((teamplay || !deathmatch) && ((invoker.InjectType == "InjectSuperStimDummy" && plr.stimcount > 0) || (invoker.InjectType == "InjectZerkDummy" && plr.zerk > 0)))
				{
					if (plr.GetCVar("hd_helptext"))
					{
						plr.A_Print(String.Format("Run away!!!\n\n%s is trying to overdose you\n\n(and possibly bugger you)...", player.GetUsername()));
					}
					if (GetCVar("hd_helptext"))
					{
						A_WeaponMessage("They seem a bit fidgety already...");
					}
					return ResolveState("Nope");
				}
				else
				{
					A_TakeInjector(invoker.InventoryType);
					plr.A_StartSound(HDPlayerPawn(plr).medsound, CHAN_VOICE);
					plr.A_SetBlend("7a 3a 18", 0.1, 4);
					Actor a = Spawn(invoker.InjectType, plr.pos, ALLOW_REPLACE);
					a.target = plr;
					if (!CheckInventory(invoker.InventoryType, 1))
					{
						return ResolveState("DeselectHold");
					}
					return ResolveState("Injected");
				}
			}
		Injected:
			TNT1 A 0
			{
				Actor a = Spawn(invoker.SpentInjectType, pos + (0, 0, height - 8), ALLOW_REPLACE);
				a.angle = angle;
				a.vel = vel;
				a.A_ChangeVelocity(-2, 1, 4, CVF_RELATIVE);
				A_StartSound("weapons/grenopen", CHAN_VOICE);
			}
		InjectedHold:
			TNT1 A 1 A_ClearRefire();
			TNT1 A 0 A_JumpIf(PressingFire(), "InjectedHold");
			TNT1 A 10 A_SelectWeapon("HDFist");
			TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
			Goto ReadyEnd;
	}
}

class InjectSuperStimDummy : InjectStimDummy
{
	Default
	{
		Accuracy 70;
	}

	States
	{
		Spawn:
			TNT1 A 6 nodelay
			{
				tg = HDPlayerPawn(target);
				if (!tg || tg.bKILLED)
				{
					Destroy();
					return;
				}

				tg.aggravateddamage += random(1, 2);
				if (tg.zerk > 0)
				{
					tg.aggravateddamage + random(2, 4);
				}
			}
			TNT1 A 1
			{
				if (target.bKILLED || Accuracy < 1)
				{
					Destroy();
					return;
				}

				if (Accuracy % 2 == 0)
				{
					// [Ace] Standard dosage.
					if (Accuracy > default.Accuracy - 40)
					{
						tg.stimcount++;
						tg.fatigue += 2;
					}
					tg.GiveBody(randompick(1, 1, 2));

					// [Ace] Overdose if you try to overregenerate.
					if (tg.Health >= 85)
					{
						tg.stimcount++;
						tg.fatigue += 3;
					}
				}
				Accuracy--;
			}
			Wait;
	}
}

class SpentSuperStim : SpentZerk
{
	Default
	{
		Translation "None";
	}

	States
	{
		Spawn:
			SSYR G 1 A_SetRoll(Roll + 60, SPF_INTERPOLATE);
			Loop;
		Death:
			SSYR G -1
			{
				Roll = 0;
				if (!random(0, 1))
				{
					Scale.x *= -1;
				}
			}
			Stop;
	}
}
